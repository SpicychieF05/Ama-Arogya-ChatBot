name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov flake8 black

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Run tests with pytest
        run: |
          pytest test_api.py -v --cov=main --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for security vulnerabilities
        run: |
          safety check --json || true
          bandit -r . -f json || true

  build-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate main.py imports
        run: |
          python -c "import main; print('Main module imports successfully')"

      - name: Check database connection
        run: |
          python -c "from database import SessionLocal; print('Database module imports successfully')"

      - name: Validate Rasa configuration
        run: |
          if [ -f "domain.yml" ]; then
            echo "domain.yml exists"
            python -c "import yaml; yaml.safe_load(open('domain.yml'))" && echo "domain.yml is valid YAML"
          fi
          if [ -f "config.yml" ]; then
            echo "config.yml exists" 
            python -c "import yaml; yaml.safe_load(open('config.yml'))" && echo "config.yml is valid YAML"
          fi

  deployment-test:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-validation]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test deployment readiness
        run: |
          echo "Testing deployment configuration..."
          python -c "
          import os
          import main
          print('App initialization successful')
          print(f'App title: {main.app.title}')
          print(f'App version: {main.app.version}')
          "

      - name: Generate deployment artifact
        run: |
          tar -czf deployment-artifact.tar.gz \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='htmlcov' \
            --exclude='coverage.xml' \
            .

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: ama-arogya-deployment
          path: deployment-artifact.tar.gz
          retention-days: 30
